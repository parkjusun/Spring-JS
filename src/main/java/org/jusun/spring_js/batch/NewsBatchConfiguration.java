package org.jusun.spring_js.batch;import lombok.RequiredArgsConstructor;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import org.jsoup.select.Elements;import org.springframework.batch.core.Job;import org.springframework.batch.core.JobExecution;import org.springframework.batch.core.JobParametersBuilder;import org.springframework.batch.core.Step;import org.springframework.batch.core.StepContribution;import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;import org.springframework.batch.core.launch.support.RunIdIncrementer;import org.springframework.batch.core.scope.context.ChunkContext;import org.springframework.batch.core.step.tasklet.Tasklet;import org.springframework.batch.core.step.tasklet.TaskletStep;import org.springframework.batch.repeat.RepeatStatus;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.scheduling.annotation.EnableScheduling;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.batch.core.launch.JobLauncher;@Configuration@EnableBatchProcessing@EnableScheduling@RequiredArgsConstructorpublic class NewsBatchConfiguration {    private final JobLauncher jobLauncher;    private final Job job;    // 매일 오전 9시에 Job 실행    @Scheduled(cron = "0 0 9 * * ?")    public void perform() throws Exception {        jobLauncher.run(job, new JobParametersBuilder().addLong("time", System.currentTimeMillis()).toJobParameters());    }    @Bean    public Job job() {        return jobBuilderFactory.get("headlineJob")                .incrementer(new RunIdIncrementer())                .start(step())                .build();    }    @Bean    public Step step() {        return stepBuilderFactory.get("headlineStep")                .tasklet(new NewsTasklet())                .build();    }    public class NewsTasklet implements Tasklet {        @Override        public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) {            try {                // Naver IT 뉴스 페이지에서 HTML 가져오기                String url = "https://news.naver.com/section/105";                Document document = Jsoup.connect(url).get();                // 헤드라인 영역 파싱                Elements headlines = document.select("ul#_SECTION_HEADLINE_LIST_aabdd li.sa_item");                for (Element headline : headlines) {                    String title = headline.select(".sa_text_strong").text();                    String press = headline.select(".sa_text_press").text();                    System.out.println("Title: " + title + " | Press: " + press);                }            } catch (Exception e) {                e.printStackTrace();            }            return RepeatStatus.FINISHED;        }    }}